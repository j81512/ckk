/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.57
 * Generated at: 2020-11-10 21:19:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.mypage.schedule;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.text.SimpleDateFormat;
import board.model.vo.Schedule;
import board.model.vo.Board;
import java.util.List;
import java.util.Map;
import user.member.model.service.UserService;
import user.member.controller.*;
import user.vo.User;

public final class schedule_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/views/common/darkFooter.jsp", Long.valueOf(1598284334000L));
    _jspx_dependants.put("/WEB-INF/views/common/darkHeader.jsp", Long.valueOf(1598273788000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("user.member.controller");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("board.model.vo.Schedule");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("user.vo.User");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("user.member.model.service.UserService");
    _jspx_imports_classes.add("board.model.vo.Board");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <!-- (예빈)기존의 header와 구조상 완전히 동일하나 색상을 블랙 테마로 변경한 특수 헤더. 스케줄 게시판에만 사용된다. -->\r\n");
      out.write("    ");

	User memberLoggedIn = (User)session.getAttribute("memberLoggedIn");
    String adminGrade = UserService.USER_ADMIN;

	//쿠키확인 : 요청과 함께 전송된 쿠키확인
	boolean saveId = false;
	String userId = "";
	Cookie[] cookies = request.getCookies();
	if(cookies != null){
		for(Cookie c : cookies){
			String key = c.getName();
			String value = c.getValue();
			if("saveId".equals(key)){
				saveId = true;
				userId = value;
			}
		}
	}	

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title></title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath() );
      out.write("/css/dark-header.css\" />\r\n");
      out.write(" <script src=\"");
      out.print( request.getContextPath() );
      out.write("/js/jquery-3.5.1.js\"></script>\r\n");
      out.write("    <script>\r\n");
      out.write("        $(function(){\r\n");
      out.write("\t$(\"#user-login-form\").submit(function(){\r\n");
      out.write("\t\tvar $userId = $(\"#input-login-id\");\r\n");
      out.write("\t\tvar $password = $(\"#input-login-password\");\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif(/^.{4,}$/.test($userId.val()) == false){\r\n");
      out.write("\t\t\talert(\"유효한 아이디를 입력하세요.\");\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\tif(/^.{4,}$/.test($password.val()) == false){\r\n");
      out.write("\t\t\talert(\"유효한 패스워드를 입력하세요.\");\t\t\t\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("\t        });\r\n");
      out.write("        });\r\n");
      out.write("        \r\n");
      out.write("        // 로그인 드롭다운 \r\n");
      out.write("        function mypage(){\r\n");
      out.write("            $(\"#mypage-login\").slideToggle();    \r\n");
      out.write("            $(\"#mypage-loggedIn\").slideToggle();    \r\n");
      out.write("        }\r\n");
      out.write("        // 비밀번호 변경 시 js 효과\r\n");
      out.write("/*         function lostPw(){\r\n");
      out.write("            $(\"#mypage-login\").slideUp();\r\n");
      out.write("            $(\"#mypage-lostpw\").slideDown('300', 'linear');\r\n");
      out.write("        }; */\r\n");
      out.write("        // 비밀번호 변경 시 정보 체크\r\n");
      out.write("        function infoChk(){\r\n");
      out.write("            var INFO = 1;\r\n");
      out.write("            if(INFO = 1){\r\n");
      out.write("                alert(\"비밀번호 변경이 완료되었습니다!\");\r\n");
      out.write("                 $(\"#mypage-lostpw\").slideUp();\r\n");
      out.write("                $(\"#mypage-lostpw\").css(\"display\", \"none.\");\r\n");
      out.write("                $(\"#mypage-login\").slideDown(); \r\n");
      out.write("\r\n");
      out.write("            }else{\r\n");
      out.write("                alert(\"입력하신 정보가 고객님의 회원 정보와 일치하지 않습니다.\\n다시 확인해 주세요.\");\r\n");
      out.write("            }\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        $(function(){\r\n");
      out.write("        \t$(\"#logout\").click(function(){\r\n");
      out.write("        \t\t$(\"#mypage-login\").slideToggle();\r\n");
      out.write("        \t\t$(\"#mypage-loggedIn\").slideToggle();\r\n");
      out.write("        \t\tvar result = confirm(\"로그아웃 하시겠습니까?\");\r\n");
      out.write("            \tif(result){\r\n");
      out.write("            \t\tlocation.href = \"");
      out.print( request.getContextPath() );
      out.write("/user/logout\";\r\n");
      out.write("            \t\talert(\"성공적으로 로그아웃 되었습니다!\");\r\n");
      out.write("            \t}\r\n");
      out.write("        \t});\r\n");
      out.write("        });\r\n");
      out.write("        function adminLogout(){\r\n");
      out.write("        \tvar result = confirm(\"로그아웃 하시겠습니까?\");\r\n");
      out.write("        \tif(result){\r\n");
      out.write("        \t\tlocation.href = \"");
      out.print( request.getContextPath() );
      out.write("/user/logout\";\r\n");
      out.write("        \t\talert(\"성공적으로 로그아웃 되었습니다!\");\r\n");
      out.write("        \t}\r\n");
      out.write("        };\r\n");
      out.write("        //비밀번호 재설정\r\n");
      out.write("        function lostPw(){\r\n");
      out.write("        \tlocation.href = \"");
      out.print(request.getContextPath());
      out.write("/user/checkInfo\";\r\n");
      out.write("        \t\r\n");
      out.write("        };\r\n");
      out.write("        \r\n");
      out.write("        //리뷰팝업\r\n");
      out.write("\t        function writeReview(){\r\n");
      out.write("        \tvar url = \"");
      out.print(request.getContextPath());
      out.write("/user/writeReview\";\r\n");
      out.write("        \tvar title = \"WriteReviewPopup\";\r\n");
      out.write("        \tvar status = \"left=366px, top=100px, width=700px, height=450px\";\r\n");
      out.write("        \t\r\n");
      out.write("        \topen(url, title, status);\r\n");
      out.write("        }; \r\n");
      out.write("        \r\n");
      out.write("        function msg(){\r\n");
      out.write("        \tvar url = \"");
      out.print( request.getContextPath() );
      out.write("/user/message?userId=");
      out.print( memberLoggedIn != null ? memberLoggedIn.getUserId() : "" );
      out.write("\";\r\n");
      out.write("        \tvar title = \"My Message\";\r\n");
      out.write("        \tvar status = \"left= 366px, top=100px, width=700px, height=450;\";\r\n");
      out.write("        \topen(url, title, status);\r\n");
      out.write("        };\r\n");
      out.write("    </script>\r\n");
      out.write("    <style>\r\n");
      out.write("\t  @font-face {\r\n");
      out.write("        font-family: 'IBMPlexSansKR-Regular';\r\n");
      out.write("        src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_20-07@1.0/IBMPlexSansKR-Regular.woff') format('woff');\r\n");
      out.write("        font-weight: normal;\r\n");
      out.write("        font-style: normal;\r\n");
      out.write("        }  \r\n");
      out.write("        html, body{\r\n");
      out.write("        font-family: 'IBMPlexSansKR-Regular';\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- 회원이 현재 로그인하지 않은 경우, 즉 비회원인 경우 -->\r\n");
 if (memberLoggedIn == null){ 
      out.write("\t\r\n");
      out.write("    <div class=\"wrapper-user-header\">\r\n");
      out.write("        <div class=\"user-header\">\r\n");
      out.write("            <div class=\"user-navbar\">\r\n");
      out.write("                    <div class=\"navbar-user-menu\">\r\n");
      out.write("                <a href=\"");
      out.print( request.getContextPath());
      out.write("\"><button id=\"logo-btn\" class=\"logo-btn\">cooking-king</button></a>\r\n");
      out.write("            <button class=\"user-navbar1\" onclick=\"location.href='");
      out.print( request.getContextPath() );
      out.write("/board/list'\">클래스</button>\r\n");
      out.write("            <button class=\"user-navbar2\" onclick=\"location.href='");
      out.print(request.getContextPath());
      out.write("/member/schedule'\">내 스케줄</button>\r\n");
      out.write("            <button class=\"user-navbar4\" id=\"mypage-btn\" onclick=\"mypage();\">로그인</button>\r\n");
      out.write("            <button class=\"user-navbar5\" onclick=\"\">고객센터</button>\r\n");
      out.write("                    </div>\r\n");
      out.write("            </div>\r\n");
      out.write("       <div class=\"login-wrapper\">\r\n");
      out.write("            <div class=\"mypage-login\" id=\"mypage-login\">\r\n");
      out.write("                <p id=\"welcome-back\" class=\"welcome-back\">WELCOME!</p>\r\n");
      out.write("                <form class=\"user-login-form\" id=\"user-login-form\"\r\n");
      out.write("                action=\"");
      out.print( request.getContextPath() );
      out.write("/user/login\"\r\n");
      out.write("\t\t\t\t\t  method=\"POST\">\r\n");
      out.write("                    <input type=\"text\" class=\"input-login-id\" id=\"input-login-id\" name=\"userId\"\r\n");
      out.write("                        placeholder=\"아이디를 입력하세요.\" value=\"");
      out.print( saveId ? userId : "");
      out.write("\" required><br>\r\n");
      out.write("                    <input type=\"password\" class=\"input-login-password\" id=\"input-login-password\" name=\"password\"\r\n");
      out.write("                        placeholder=\"비밀번호를 입력하세요.\" required><br>\r\n");
      out.write("                        <a href=\"#\" id=\"lost-pw\" class=\"lost-pw-question\" onclick=\"lostPw();\">비밀번호를 잊으셨나요?</a>\r\n");
      out.write("                        <br />\r\n");
      out.write("                        <a href=\"");
      out.print( request.getContextPath());
      out.write("/user/enroll\" \r\n");
      out.write("                        id=\"register-q\" class=\"register-question\">또는 회원가입을 원하시나요?</a>\r\n");
      out.write("                        <br />\r\n");
      out.write("                    <input type=\"submit\" value=\"로그인\" id=\"login-btn\" class=\"login-btn\" onclick=\"login();\" required><br>\r\n");
      out.write("                </form>\r\n");
      out.write("           </div>\r\n");
      out.write("     </div>\r\n");
      out.write("</div>\r\n");
      out.write("<!-- 여기까지 확인 완료 -->\r\n");
      out.write("  ");
 } else if (memberLoggedIn != null && !memberLoggedIn.getCommGrade().equals(adminGrade)){ 
      out.write("\r\n");
      out.write("      <div class=\"wrapper-user-header\">\r\n");
      out.write("        <div class=\"user-header\">\r\n");
      out.write("            <div class=\"user-navbar\">\r\n");
      out.write("                    <div class=\"navbar-user-menu\">\r\n");
      out.write("                <a href=\"");
      out.print( request.getContextPath());
      out.write("\"><button id=\"logo-btn\" class=\"logo-btn\">cooking-king</button></a>\r\n");
      out.write("            <button class=\"user-navbar1\" onclick=\"location.href='");
      out.print( request.getContextPath() );
      out.write("/board/list'\">클래스</button>\r\n");
      out.write("            <button class=\"user-navbar2\" onclick=\"location.href='");
      out.print(request.getContextPath());
      out.write("/member/schedule?userId=");
      out.print(memberLoggedIn.getUserId());
      out.write("'\">내 스케줄</button>\r\n");
      out.write("            <button class=\"user-navbar4\" id=\"mypage-btn\" onclick=\"mypage();\">마이페이지</button>\r\n");
      out.write("            <button class=\"user-navbar5\" onclick=\"location.href='");
      out.print( request.getContextPath());
      out.write("/center/list'\">고객센터</button>\r\n");
      out.write("                    </div>\r\n");
      out.write("            </div>\r\n");
      out.write("      <div class=\"mypage-loggedIn\" id=\"mypage-loggedIn\">\r\n");
      out.write("   \t\t<div class=\"hello\" id=\"hello\">\r\n");
      out.write("   \t\t\t<p class=\"hello-p\">");
      out.print( memberLoggedIn.getUserName() );
      out.write("님, 안녕하세요.</p>\r\n");
      out.write("   \t\t</div>\r\n");
      out.write("        <div class=\"mypage\" id=\"mypage\">\r\n");
      out.write("            <button class=\"mypages\" id=\"myinfo\" onclick=\"location.href='");
      out.print( request.getContextPath());
      out.write("/user/view?userId=");
      out.print(memberLoggedIn.getUserId());
      out.write("'\">내 정보 수정</button><br />\r\n");
      out.write("            <button class=\"mypages\" id=\"point-charge\" onclick=\"location.href='");
      out.print(request.getContextPath());
      out.write("/point/pointManagement'\">포인트 관리</button><br />\r\n");
      out.write("            <button class=\"mypages\" id=\"write-resume\" onclick=\"location.href='");
      out.print(request.getContextPath());
      out.write("/tutor/writerResume?userId=");
      out.print(memberLoggedIn.getUserId());
      out.write("'\">이력서 관리</button><br />\r\n");
      out.write("            <button class=\"mypages\" id=\"write-review\" onclick=\"writeReview();\">리뷰 작성</button><br />\r\n");
      out.write("            <button class=\"mypages\" id=\"get-msg\" onclick=\"msg();\">메세지</button><br />\r\n");
      out.write("            <button class=\"mypages\" id=\"logout\" onclick=\"location.href='");
      out.print(request.getContextPath());
      out.write("/member/logout'\">로그아웃</button>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>    \r\n");
      out.write("        ");
 } else if (memberLoggedIn != null && memberLoggedIn.getCommGrade().equals(adminGrade)){ 
      out.write("\r\n");
      out.write("    \t    <div class=\"wrapper-admin-header\">\r\n");
      out.write("       \t\t\t <div class=\"admin-header\">\r\n");
      out.write("          \t\t\t  <div class=\"admin-navbar\">\r\n");
      out.write("                    <div class=\"navbar-admin-menu\">\r\n");
      out.write("                <a href=\"");
      out.print( request.getContextPath());
      out.write("\"><button id=\"logo-btn-a\">cooking-king</button></a>\r\n");
      out.write("            <button class=\"admin-navbar0\" id=\"admin-logout\" onclick=\"adminLogout();\">로그아웃</button>\r\n");
      out.write("            <button class=\"admin-navbar1\" onclick=\"location.href='");
      out.print( request.getContextPath() );
      out.write("/board/list'\">클래스 관리</button>\r\n");
      out.write("            <button class=\"admin-navbar2\" onclick=\"location.href='");
      out.print(request.getContextPath());
      out.write("/admin/page'\">회원 관리</button>\r\n");
      out.write("            <button class=\"admin-navbar4\" onclick=\"location.href='");
      out.print( request.getContextPath());
      out.write("/admin/analysis'\">현황 조회</button>\r\n");
      out.write("            <button class=\"admin-navbar5\" onclick=\"location.href='");
      out.print( request.getContextPath());
      out.write("/center/list'\">고객센터</button>\r\n");
      out.write("                    </div>\r\n");
      out.write("            </div>\r\n");
      out.write("       \t\t\t <div class=\"helloAdmin\" id=\"helloAdmin\">\r\n");
      out.write("   \t\t\t\t\t<p class=\"helloAdmin-p\" onclick=\"adminLogout();\">\r\n");
      out.write("   \t\t\t\t\t");
      out.print( memberLoggedIn.getUserName() );
      out.write("님, 안녕하세요. </p>\r\n");
      out.write("   \t\t\t\t </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    \t");
 } 
      out.write("\r\n");
      out.write("    \t</div>\r\n");
      out.write("    \t</div>\r\n");
      out.write("    \t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write('\r');
      out.write('\n');

	
	Map<String, Object> map = (Map<String, Object>)request.getAttribute("map");
	List<Board> blist = (List<Board>)map.get("blist");
	List<Board> tlist = (List<Board>)map.get("tlist");
	List<Schedule> slist = (List<Schedule>)map.get("slist");
	SimpleDateFormat sd = new SimpleDateFormat("yyyy-MM-dd");
	
	

      out.write("\r\n");
      out.write("<link rel=\"stylesheet\"href=\"");
      out.print(request.getContextPath());
      out.write("/css/schedule.css\" />\r\n");
      out.write("<script src=\"");
      out.print(request.getContextPath());
      out.write("/js/jquery-3.5.1.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("\t   .public-footer{\r\n");
      out.write("        top: 78em;\r\n");
      out.write("        }\r\n");
      out.write("</style>\r\n");
      out.write("<div class=\"calendar-outer\">\r\n");
      out.write("<div class=\"calendar-wrapper\">\r\n");
      out.write("<div id=\"calendar\"></div>\r\n");
      out.write("<div class=\"cal-sec-wrapper\">\r\n");
      out.write("<section class=\"calendar-sec\">\r\n");
      out.write("\t<!-- 마감된 수업과 현재 진행 중인 수업  -->\r\n");
      out.write("\t<div id=\"div-class\" class=\"super-class\">\r\n");
      out.write("\t<p class=\"sche-title\">내 클래스 정보</p>\r\n");
      out.write("\t\t<div class=\"month-record\">\r\n");
      out.write("\t\t<span class=\"span-record\">스케줄 조회를 희망하는 기간을 선택해 주세요.</span>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t\t<input type=\"month\" name=\"check-month\" id=\"chk-month\" />\r\n");
      out.write("\t\t\t<br />\r\n");
      out.write("\t\t\t<div class=\"record\" id=\"recordId\"></div>\r\n");
      out.write("\t\t\t<div class=\"co-record\" id=\"co-recordId\"></div>\t\t\t\r\n");
      out.write("\t</div>\r\n");
      out.write("</section>\r\n");
      out.write("</div>\r\n");
      out.write("</div>\r\n");
      out.write("</div>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("$('input[type=\"month\"]').change(function(){\r\n");
      out.write("    // 값 확인용\r\n");
      out.write("    /*  alert(this.value) */\r\n");
      out.write("    var inputDate = new Date(this.value);\r\n");
      out.write("      $.ajax({\r\n");
      out.write("             url : '");
      out.print( request.getContextPath());
      out.write("/member/recordschedule',\r\n");
      out.write("             type : 'get',\r\n");
      out.write("             data : {   \"userId\": '");
      out.print( memberLoggedIn.getUserId() );
      out.write("',\r\n");
      out.write("            \t \t\t\"userComm\" : '");
      out.print( memberLoggedIn.getCommGrade() );
      out.write("',\r\n");
      out.write("                        \"year\" : inputDate.getFullYear(),\r\n");
      out.write("                        \"month\" : inputDate.getMonth()+1\r\n");
      out.write("                    },\r\n");
      out.write("             dataType:\"json\",\r\n");
      out.write("             success : function(data) {\r\n");
      out.write("    \tconsole.log(data);\r\n");
      out.write("                 var html = \"<select name='selectRecord' id='recordId'><option selected disabled>강의 선택</option>\";\r\n");
      out.write("                    $.each(data, function(i, list){\r\n");
      out.write("\t\t\t\t\t\t$.each(list, function(j, board){\r\n");
      out.write("                            html += \"<option class='month-record' id='year-record' value=\"+ board[\"classNo\"] +\">\";\r\n");
      out.write("                            html += board[\"title\"];\r\n");
      out.write("                            html += \"</option>\";\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("                    });\r\n");
      out.write("                 html += \"</select>\";\r\n");
      out.write("                 $(\"#recordId\").html(html);\r\n");
      out.write("                 $(\"#recordId\").css(\"color\", \"red\");\r\n");
      out.write("             },\r\n");
      out.write("             error : function(xhr, textStatus, err){\r\n");
      out.write("                 alert(\"에러입니다\");\r\n");
      out.write("                 console.log(xhr, textStatus, err);\r\n");
      out.write("             }\r\n");
      out.write("          });\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("\t        \r\n");
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\t\t$(function(){\r\n");
      out.write("\t\t\t\t\t$(\"#recordId\").change(function(){\r\n");
      out.write("\t\t\t\t\t\t//값 확인용\r\n");
      out.write("\t\t\t\t\t\tconsole.log($(this).find(\"option:selected\").val());\r\n");
      out.write("\t\t\t\t\t\tvar classNo = $(this).find(\"option:selected\").val()\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t $.ajax({\r\n");
      out.write("\t\t\t\t\t\t\turl : '");
      out.print( request.getContextPath());
      out.write("/member/coworkschedule',\r\n");
      out.write("\t\t\t\t\t\t\t type : 'get',\r\n");
      out.write("\t\t\t\t\t\t\t data : {\r\n");
      out.write("\t\t\t\t\t\t\t\t \t\t\"classNo\" : classNo\r\n");
      out.write("\t\t\t\t        \t \t\t},\r\n");
      out.write("\t\t\t\t\t\t\t dataType:\"json\",\r\n");
      out.write("\t\t\t\t\t\t\t success : function(data) {\r\n");
      out.write("\t\t\t\t\t\t\t\t console.log(data);\r\n");
      out.write("\t\t\t\t\t\t\t\tvar no = 1;\r\n");
      out.write("\t\t\t\t\t\t\t\tvar content = data[1][\"tutorName\"];\r\n");
      out.write("\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t/* (예빈)배치 편의/순서상 타이틀은 따로 뺀 후 튜터 이름과 수업 일자를 p 태그 하나에 넣고 wrapper:div를 추가합니다. */\r\n");
      out.write("\t\t\t\t\t\t\t\tvar html = \"<p class='tutor-day'>\"+data[0][\"day\"]+\"일, \"+data[1][\"tutorName\"]+\" 튜터님과 수업 </p>\";\r\n");
      out.write("\t\t\t\t\t\t\t\t/* \thtml += \"<p class='class-date'>수업 일자 : \"+data[0][\"day\"]+\"일 </p>\"; */\r\n");
      out.write("\t\t\t\t\t\t\t\t  \thtml += \"<div class='sch-cont'><p class='sch-content'>\"+data[1][\"classContent\"]+ \"</p></div><hr id='sch-hr'><div class='mates-wrapper'>\";\r\n");
      out.write("\t\t\t\t\t\t\t\t\thtml +=  \"<h2 class='co-h2'>클래스 메이트 목록</h2>\";\r\n");
      out.write("\t\t\t\t\t\t\t\t\thtml += \"<table class='classTable' id='co-table'>\";\r\n");
      out.write("\t\t\t\t\t\t\t\t\thtml += \"<tr class='tr-phone'><th class='th-name'>이름</th><th class='th-phone'>연락처</th></tr></div>\"\r\n");
      out.write("\t\t\t\t\t\t\t\t \t$.each(data, function(i, board){\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\thtml += '<tr class='+\"co-tr\" + i +'>';\r\n");
      out.write("\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\thtml += \"<td>\"+ board[\"userName\"] +\"</td>\" + \"<td>\"+ board[\"phone\"] +\"</td>\";\r\n");
      out.write("\t\t\t\t\t\t\t\t  \t\thtml += \"</tr>\";\t \r\n");
      out.write("\t\t\t\t\t\t\t\t\t});\t\r\n");
      out.write("\t\t\t\t\t\t\t\t  html += \"</table>\";\r\n");
      out.write("\t\t\t\t\t\t\t\t $(\"#co-recordId\").html(html);\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t },\r\n");
      out.write("\t\t\t\t\t\t\t error : function(xhr, textStatus, err){\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t\t alert(\"에러입니다\");\r\n");
      out.write("\t\t\t\t\t\t\t\t console.log(xhr, textStatus, err);\r\n");
      out.write("\t\t\t\t\t\t\t }\r\n");
      out.write("\t\t\t\t\t\t}); \r\n");
      out.write("\t\t\t\t\t}); \r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.5.1/moment.min.js\"\r\n");
      out.write("\tintegrity=\"sha512-r8lfwD+xE5L0FjDLicb4ZiF32sJqCAOnLN0nxQq5VW0t0nFEEiNIvTZ/I9Su4ulGpDCfYjXsSFZsT9FpILp2+A==\"\r\n");
      out.write("\tcrossorigin=\"anonymous\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("$(function(){\r\n");
      out.write("    !function() {\r\n");
      out.write("\t\r\n");
      out.write("\t  var today = moment();\r\n");
      out.write("\t\r\n");
      out.write("\t  function Calendar(selector, events) {\r\n");
      out.write("\t    this.el = document.querySelector(selector);\r\n");
      out.write("\t    this.events = events;\r\n");
      out.write("\t    this.current = moment().date(1);\r\n");
      out.write("\t    this.events.forEach(function(ev) {\r\n");
      out.write("\t    ev.date = moment(ev.date);\r\n");
      out.write("\t    });\r\n");
      out.write("\t    this.draw();\r\n");
      out.write("\t    var current = document.querySelector('.today');\r\n");
      out.write("\t    if(current) {\r\n");
      out.write("\t      var self = this;\r\n");
      out.write("\t      window.setTimeout(function() {\r\n");
      out.write("\t        self.openDay(current);\r\n");
      out.write("\t      }, 500);\r\n");
      out.write("\t    }\r\n");
      out.write("\t    \r\n");
      out.write("\t  }\r\n");
      out.write("\t\r\n");
      out.write("\t  Calendar.prototype.draw = function() {\r\n");
      out.write("\t    //Create Header\r\n");
      out.write("\t    this.drawHeader();\r\n");
      out.write("\t\r\n");
      out.write("\t    //Draw Month\r\n");
      out.write("\t    this.drawMonth();\r\n");
      out.write("\t\r\n");
      out.write("\t    this.drawLegend();\r\n");
      out.write("\t  }\r\n");
      out.write("\t\r\n");
      out.write("\t  Calendar.prototype.drawHeader = function() {\r\n");
      out.write("\t    var self = this;\r\n");
      out.write("\t    if(!this.header) {\r\n");
      out.write("\t      //Create the header elements\r\n");
      out.write("\t      this.header = createElement('div', 'header');\r\n");
      out.write("\t      this.header.className = 'header';\r\n");
      out.write("\t\r\n");
      out.write("\t      this.title = createElement('h1');\r\n");
      out.write("\t\r\n");
      out.write("\t      var right = createElement('div', 'right');\r\n");
      out.write("\t      right.addEventListener('click', function() { self.nextMonth(); });\r\n");
      out.write("\t\r\n");
      out.write("\t      var left = createElement('div', 'left');\r\n");
      out.write("\t      left.addEventListener('click', function() { self.prevMonth(); });\r\n");
      out.write("\t\r\n");
      out.write("\t      //Append the Elements\r\n");
      out.write("\t      this.header.appendChild(this.title); \r\n");
      out.write("\t      this.header.appendChild(right);\r\n");
      out.write("\t      this.header.appendChild(left);\r\n");
      out.write("\t      this.el.appendChild(this.header);\r\n");
      out.write("\t    }\r\n");
      out.write("\t\r\n");
      out.write("\t    this.title.innerHTML = this.current.format('MMMM YYYY');\r\n");
      out.write("\t  }\r\n");
      out.write("\t\r\n");
      out.write("\t  Calendar.prototype.drawMonth = function() {\r\n");
      out.write("\t    var self = this;\r\n");
      out.write("\t    \r\n");
      out.write("\t    \r\n");
      out.write("\t    if(this.month) {\r\n");
      out.write("\t      this.oldMonth = this.month;\r\n");
      out.write("\t      this.oldMonth.className = 'month out ' + (self.next ? 'next' : 'prev');\r\n");
      out.write("\t      this.oldMonth.addEventListener('webkitAnimationEnd', function() {\r\n");
      out.write("\t        self.oldMonth.parentNode.removeChild(self.oldMonth);\r\n");
      out.write("\t        self.month = createElement('div', 'month');\r\n");
      out.write("\t        self.backFill();\r\n");
      out.write("\t        self.currentMonth();\r\n");
      out.write("\t        self.fowardFill();\r\n");
      out.write("\t        self.el.appendChild(self.month);\r\n");
      out.write("\t        window.setTimeout(function() {\r\n");
      out.write("\t          self.month.className = 'month in ' + (self.next ? 'next' : 'prev');\r\n");
      out.write("\t        }, 16);\r\n");
      out.write("\t      });\r\n");
      out.write("\t    } else {\r\n");
      out.write("\t        this.month = createElement('div', 'month');\r\n");
      out.write("\t        this.el.appendChild(this.month);\r\n");
      out.write("\t        this.backFill();\r\n");
      out.write("\t        this.currentMonth();\r\n");
      out.write("\t        this.fowardFill();\r\n");
      out.write("\t        this.month.className = 'month new';\r\n");
      out.write("\t    }\r\n");
      out.write("\t  }\r\n");
      out.write("\t\r\n");
      out.write("\t  Calendar.prototype.backFill = function() {\r\n");
      out.write("\t    var clone = this.current.clone();\r\n");
      out.write("\t    var dayOfWeek = clone.day();\r\n");
      out.write("\t\r\n");
      out.write("\t    if(!dayOfWeek) { return; }\r\n");
      out.write("\t\r\n");
      out.write("\t    clone.subtract('days', dayOfWeek+1);\r\n");
      out.write("\t\r\n");
      out.write("\t    for(var i = dayOfWeek; i > 0 ; i--) {\r\n");
      out.write("\t      this.drawDay(clone.add('days', 1));\r\n");
      out.write("\t    }\r\n");
      out.write("\t  }\r\n");
      out.write("\t\r\n");
      out.write("\t  Calendar.prototype.fowardFill = function() {\r\n");
      out.write("\t    var clone = this.current.clone().add('months', 1).subtract('days', 1);\r\n");
      out.write("\t    var dayOfWeek = clone.day();\r\n");
      out.write("\t\r\n");
      out.write("\t    if(dayOfWeek === 6) { return; }\r\n");
      out.write("\t\r\n");
      out.write("\t    for(var i = dayOfWeek; i < 6 ; i++) {\r\n");
      out.write("\t      this.drawDay(clone.add('days', 1));\r\n");
      out.write("\t    }\r\n");
      out.write("\t  }\r\n");
      out.write("\t\r\n");
      out.write("\t  Calendar.prototype.currentMonth = function() {\r\n");
      out.write("\t    var clone = this.current.clone();\r\n");
      out.write("\t\r\n");
      out.write("\t    while(clone.month() === this.current.month()) {\r\n");
      out.write("\t      this.drawDay(clone);\r\n");
      out.write("\t      clone.add('days', 1);\r\n");
      out.write("\t    }\r\n");
      out.write("\t  }\r\n");
      out.write("\t\r\n");
      out.write("\t  Calendar.prototype.getWeek = function(day) {\r\n");
      out.write("\t    if(!this.week || day.day() === 0) {\r\n");
      out.write("\t      this.week = createElement('div', 'week');\r\n");
      out.write("\t      this.month.appendChild(this.week);\r\n");
      out.write("\t      console.log(this.week);\r\n");
      out.write("\t    }\r\n");
      out.write("\t  }\r\n");
      out.write("\t\r\n");
      out.write("\t  Calendar.prototype.drawDay = function(day) {\r\n");
      out.write("\t    var self = this;\r\n");
      out.write("\t    this.getWeek(day);\r\n");
      out.write("\t\r\n");
      out.write("\t    //Outer Day\r\n");
      out.write("\t    var outer = createElement('div', this.getDayClass(day));\r\n");
      out.write("\t    outer.addEventListener('click', function() {\r\n");
      out.write("\t      self.openDay(this);\r\n");
      out.write("\t    });\r\n");
      out.write("\t\r\n");
      out.write("\t    //Day Name\r\n");
      out.write("\t    var name = createElement('div', 'day-name', day.format('ddd'));\r\n");
      out.write("\t\r\n");
      out.write("\t    //Day Number\r\n");
      out.write("\t    var number = createElement('div', 'day-number', day.format('DD'));\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t    //Events\r\n");
      out.write("\t    var events = createElement('div', 'day-events');\r\n");
      out.write("\t    this.drawEvents(day, events);\r\n");
      out.write("\t\r\n");
      out.write("\t    outer.appendChild(name);\r\n");
      out.write("\t    outer.appendChild(number);\r\n");
      out.write("\t    outer.appendChild(events);\r\n");
      out.write("\t    this.week.appendChild(outer);\r\n");
      out.write("\t  }\r\n");
      out.write("\t\r\n");
      out.write("\t  Calendar.prototype.drawEvents = function(day, element) {\r\n");
      out.write("\t    if(day.month() === this.current.month()) {\r\n");
      out.write("\t      var todaysEvents = this.events.reduce(function(memo, ev) {\r\n");
      out.write("\t        if(ev.date.isSame(day, 'day')) {\r\n");
      out.write("\t          memo.push(ev);\r\n");
      out.write("\t        }\r\n");
      out.write("\t        return memo;\r\n");
      out.write("\t      }, []);\r\n");
      out.write("\t\r\n");
      out.write("\t      todaysEvents.forEach(function(ev) {\r\n");
      out.write("\t        var evSpan = createElement('span', ev.color);\r\n");
      out.write("\t        element.appendChild(evSpan);\r\n");
      out.write("\t      });\r\n");
      out.write("\t    }\r\n");
      out.write("\t  }\r\n");
      out.write("\t\r\n");
      out.write("\t  Calendar.prototype.getDayClass = function(day) {\r\n");
      out.write("\t    classes = ['day'];\r\n");
      out.write("\t    if(day.month() !== this.current.month()) {\r\n");
      out.write("\t      classes.push('other');\r\n");
      out.write("\t    } else if (today.isSame(day, 'day')) {\r\n");
      out.write("\t      classes.push('today');\r\n");
      out.write("\t    }\r\n");
      out.write("\t    return classes.join(' ');\r\n");
      out.write("\t  }\r\n");
      out.write("\t\r\n");
      out.write("\t  Calendar.prototype.openDay = function(el) {\r\n");
      out.write("\t    var details, arrow;\r\n");
      out.write("\t    var dayNumber = +el.querySelectorAll('.day-number')[0].innerText || +el.querySelectorAll('.day-number')[0].textContent;\r\n");
      out.write("\t    var day = this.current.clone().date(dayNumber);\r\n");
      out.write("\t\r\n");
      out.write("\t    var currentOpened = document.querySelector('.details');\r\n");
      out.write("\t\r\n");
      out.write("\t   /* 해당 라인(row), 즉 이번 주 라인에 이벤트가 존재한다면 detail-box를 연다. */\r\n");
      out.write("\t    if(currentOpened && currentOpened.parentNode === el.parentNode) {\r\n");
      out.write("\t      details = currentOpened;\r\n");
      out.write("\t      arrow = document.querySelector('.arrow');\r\n");
      out.write("\t    } else {\r\n");
      out.write("\t   /* 이벤트가 다른 week-라인에 존재한다면  detail-box를 닫는다. */\r\n");
      out.write("      //currentOpened && currentOpened.parentNode.removeChild(currentOpened);\r\n");
      out.write("      if(currentOpened) {\r\n");
      out.write("        currentOpened.addEventListener('webkitAnimationEnd', function() {\r\n");
      out.write("          currentOpened.parentNode.removeChild(currentOpened);\r\n");
      out.write("        });\r\n");
      out.write("        currentOpened.addEventListener('oanimationend', function() {\r\n");
      out.write("          currentOpened.parentNode.removeChild(currentOpened);\r\n");
      out.write("        });\r\n");
      out.write("        currentOpened.addEventListener('msAnimationEnd', function() {\r\n");
      out.write("          currentOpened.parentNode.removeChild(currentOpened);\r\n");
      out.write("        });\r\n");
      out.write("        currentOpened.addEventListener('animationend', function() {\r\n");
      out.write("          currentOpened.parentNode.removeChild(currentOpened);\r\n");
      out.write("        });\r\n");
      out.write("        currentOpened.className = 'details out';\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("\t      //디테일 컨테이너-요소를 생성한다. 즉 회색 박스에 내용이 표기되는 그 부분\r\n");
      out.write("\t      details = createElement('div', 'details in');\r\n");
      out.write("\t\r\n");
      out.write("\t      //arrow, 디테일-컨테이너가 가리킬 세모꼴의 화살표가 위치할 포지션을 설정한다. '하루치-박스'의 정 중앙에 오도록 설정할 것.\r\n");
      out.write("\t      var arrow = createElement('div', 'arrow');\r\n");
      out.write("\t\r\n");
      out.write("\t      //Create the event wrapper\r\n");
      out.write("\t      details.appendChild(arrow);\r\n");
      out.write("\t      el.parentNode.appendChild(details);\r\n");
      out.write("\t    }\r\n");
      out.write("\t\t\r\n");
      out.write("\t    var todaysEvents = this.events.reduce(function(memo, ev) {\r\n");
      out.write("\t      if(ev.date.isSame(day, 'day')) {\r\n");
      out.write("\t        memo.push(ev);\r\n");
      out.write("\t      }\r\n");
      out.write("\t      return memo;\r\n");
      out.write("\t    }, []);\r\n");
      out.write("\t\r\n");
      out.write("\t    this.renderEvents(todaysEvents, details);\r\n");
      out.write("\t\r\n");
      out.write("\t    /* 현재 시점에서 한 칸(즉 하루분)의 정 중앙에 가까운 위치는 27px로, 각 칸의 크기를 늘리면 이 수치도 변경하여야 한다. em으로 수정함. */\r\n");
      out.write("\t    arrow.style.left = el.offsetLeft - el.parentNode.offsetLeft + 2.7 + 'em';\r\n");
      out.write("/* \t    arrow.style.left = el.offsetLeft - el.parentNode.offsetLeft + 27 + 'px'; */\r\n");
      out.write("\t  }\r\n");
      out.write("\t\r\n");
      out.write("\t  Calendar.prototype.renderEvents = function(events, ele) {\r\n");
      out.write("\t    //Remove any events in the current details element\r\n");
      out.write("\t    var currentWrapper = ele.querySelector('.events');\r\n");
      out.write("\t    var wrapper = createElement('div', 'events in' + (currentWrapper ? ' new' : ''));\r\n");
      out.write("\t\r\n");
      out.write("\t    events.forEach(function(ev) {\r\n");
      out.write("\t      var div = createElement('div', 'event');\r\n");
      out.write("\t      var square = createElement('div', 'event-category ' + ev.color);\r\n");
      out.write("\t      var span = createElement('span', 'click-span', ev.eventName);\r\n");
      out.write("\t\t\r\n");
      out.write("\t      div.appendChild(square);\r\n");
      out.write("\t      div.appendChild(span);\r\n");
      out.write("\t      wrapper.appendChild(div);\r\n");
      out.write("\t     \t\r\n");
      out.write("\t \r\n");
      out.write("\t    });\r\n");
      out.write("\t    \r\n");
      out.write("\t\r\n");
      out.write("\t    if(!events.length) {\r\n");
      out.write("\t      var div = createElement('div', 'event empty');\r\n");
      out.write("\t      var span = createElement('span', '', '수강 클래스가 없습니다.');\r\n");
      out.write("\t\r\n");
      out.write("\t      div.appendChild(span);\r\n");
      out.write("\t      wrapper.appendChild(div);\r\n");
      out.write("\t    }\r\n");
      out.write("\t\r\n");
      out.write("\t    if(currentWrapper) {\r\n");
      out.write("\t      currentWrapper.className = 'events out';\r\n");
      out.write("\t      currentWrapper.addEventListener('webkitAnimationEnd', function() {\r\n");
      out.write("\t        currentWrapper.parentNode.removeChild(currentWrapper);\r\n");
      out.write("\t        ele.appendChild(wrapper);\r\n");
      out.write("\t      });\r\n");
      out.write("\t      currentWrapper.addEventListener('oanimationend', function() {\r\n");
      out.write("\t        currentWrapper.parentNode.removeChild(currentWrapper);\r\n");
      out.write("\t        ele.appendChild(wrapper);\r\n");
      out.write("\t      });\r\n");
      out.write("\t      currentWrapper.addEventListener('msAnimationEnd', function() {\r\n");
      out.write("\t        currentWrapper.parentNode.removeChild(currentWrapper);\r\n");
      out.write("\t        ele.appendChild(wrapper);\r\n");
      out.write("\t      });\r\n");
      out.write("\t      currentWrapper.addEventListener('animationend', function() {\r\n");
      out.write("\t        currentWrapper.parentNode.removeChild(currentWrapper);\r\n");
      out.write("\t        ele.appendChild(wrapper);\r\n");
      out.write("\t      });\r\n");
      out.write("\t    } else {\r\n");
      out.write("\t      ele.appendChild(wrapper);\r\n");
      out.write("\t    }\r\n");
      out.write("\t  }\r\n");
      out.write("\t\r\n");
      out.write("\t  Calendar.prototype.drawLegend = function() {\r\n");
      out.write("\t    var legend = createElement('div', 'legend');\r\n");
      out.write("\t    var calendars = this.events.map(function(e) {\r\n");
      out.write("\t      return e.calendar + '|' + e.color;\r\n");
      out.write("\t    }).reduce(function(memo, e) {\r\n");
      out.write("\t      if(memo.indexOf(e) === -1) {\r\n");
      out.write("\t        memo.push(e);\r\n");
      out.write("\t      }\r\n");
      out.write("\t      return memo;\r\n");
      out.write("\t    }, []).forEach(function(e) {\r\n");
      out.write("\t      var parts = e.split('|');\r\n");
      out.write("\t      var entry = createElement('span', 'entry ' +  parts[1], parts[0]);\r\n");
      out.write("\t      legend.appendChild(entry);\r\n");
      out.write("\t    });\r\n");
      out.write("\t    legend.addEventListener('click', function() { self.nextMonth(); });\r\n");
      out.write("\t    this.el.appendChild(legend);\r\n");
      out.write("\t  }\r\n");
      out.write("\t\r\n");
      out.write("\t  Calendar.prototype.nextMonth = function() {\r\n");
      out.write("\t    this.current.add('months', 1);\r\n");
      out.write("\t    this.next = true;\r\n");
      out.write("\t    this.draw();\r\n");
      out.write("\t  }\r\n");
      out.write("\t\r\n");
      out.write("\t  Calendar.prototype.prevMonth = function() {\r\n");
      out.write("\t    this.current.subtract('months', 1);\r\n");
      out.write("\t    this.next = false;\r\n");
      out.write("\t    this.draw();\r\n");
      out.write("\t  }\r\n");
      out.write("\t\r\n");
      out.write("\t  window.Calendar = Calendar;\r\n");
      out.write("\t\r\n");
      out.write("\t /* 요소 생성 : 태그명, 클래스명, 내부 데이터(텍스트) : 위에서 선언한 데이터들을 바탕으로 이를 묶어서 대입한다. */\r\n");
      out.write("\t  function createElement(tagName, className, innerText) {\r\n");
      out.write("\t    var ele = document.createElement(tagName);\r\n");
      out.write("\t    if(className) {\r\n");
      out.write("\t      ele.className = className;\r\n");
      out.write("\t    }\r\n");
      out.write("\t    if(innerText) {\r\n");
      out.write("\t      ele.innderText = ele.textContent = innerText;\r\n");
      out.write("\t    }\r\n");
      out.write("\t    return ele;\r\n");
      out.write("\t  }\r\n");
      out.write("\t  }();\r\n");
      out.write("\t\r\n");
      out.write("\t  !function() {\r\n");
      out.write("\t  \t  var data = [\r\n");
      out.write("\r\n");
      out.write("\t /* 각 카테고리 설정 및 데이터 대입 파트 */\r\n");
 if(memberLoggedIn.getCommGrade().equals("US")){ 
      out.write("\r\n");
      out.write("\t  \t\t  \r\n");
      out.write("  \t\t");
 
		int i = 1;
  		for(Board b : blist) {
  		
      out.write("\t\r\n");
      out.write("  \t\t/* (예빈) 이 아래로 붉은 줄이 쳐질 때가 있으나 라인 흔들어주면 되고, 정상 작동 되는 것을 확인함. */\r\n");
      out.write("  \t\t\t    { eventName: '");
      out.print( b.getTitle());
      out.write(' ');
      out.write(':');
      out.write(' ');
      out.print( b.getStartTime());
      out.write("시 ~ ");
      out.print( b.getEndTime() );
      out.write('시');
      out.write(' ');
      out.print( b.getTutorName() );
      out.write(" 튜터 ',\r\n");
      out.write("  \t\t\t\t\t/* (예빈)legend에 올라가는 각 카테고리 정보는 이 곳으로 와야 함. */\r\n");
      out.write("  \t\t\t    \tcalendar : '");
      out.print( b.getCategory().equals("MD") ? "Main Dish(본 요리) 분야" : b.getCategory().equals("DS") 
  			    			? "Dessert(디저트) 분야" : b.getCategory().equals("DR") ? "Drinks(음료) 분야" : "Liquors(주류) 분야" );
      out.write("',\r\n");
      out.write("  \t\t\t\t\tcolor : '");
      out.print( b.getCategory().equals("MD") ? "orange" : b.getCategory().equals("DS") ? "blue" : b.getCategory().equals("DR") ? "yellow" : "green" );
      out.write("',\r\n");
      out.write("  \t\t\t\t\tdate : '");
      out.print( sd.format(b.getClassDate()));
      out.write("'\r\n");
      out.write("  \t\t}");
      out.print( i == blist.size() ? "" : "," );
      out.write("  \r\n");
      out.write("  \t\t\t    \r\n");
      out.write("  \t\t");

  			i++;
  		} 
  		
      out.write('\r');
      out.write('\n');
 }else if(!(memberLoggedIn.getCommGrade().equals("US") && memberLoggedIn.getCommGrade().equals("AD")) ){ 
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t");
for(Board t : tlist){ 
      out.write("\r\n");
      out.write("\t\t\t\t{   eventName: '");
      out.print( t.getTitle());
      out.write(' ');
      out.write(':');
      out.write(' ');
      out.print( t.getStartTime());
      out.write("시 ~ ");
      out.print( t.getEndTime() );
      out.write("시',\r\n");
      out.write("\t\t\t\t\tcalendar : 'My Class',\r\n");
      out.write("\t\t\t\t\tcolor : 'white',\r\n");
      out.write("\t\t\t\t\tdate : '");
      out.print( sd.format(t.getClassDate()));
      out.write("'\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t");

	  	}
		int i = 1;
		for(Board b : blist) {
		
      out.write("\r\n");
      out.write("\t\t\t    {   eventName: '");
      out.print( b.getTitle());
      out.write(' ');
      out.write(':');
      out.write(' ');
      out.print( b.getStartTime());
      out.write("시 ~ ");
      out.print( b.getEndTime() );
      out.write('시');
      out.write(' ');
      out.write(' ');
      out.print( b.getTutorName() );
      out.write(" 튜터',\r\n");
      out.write("\t\t\t\t\tcalendar : '");
      out.print( b.getCategory().equals("MD") ? "본 요리 분야" : b.getCategory().equals("DS") ? "제과/제빵 분야" : b.getCategory().equals("DR") ? "음료 분야" : "주류 분야" );
      out.write("',\r\n");
      out.write("\t\t\t\t\tcolor : '");
      out.print( b.getCategory().equals("MD") ? "orange" : b.getCategory().equals("DS") ? "blue" : b.getCategory().equals("DR") ? "yellow" : "green" );
      out.write("',\r\n");
      out.write("\t\t\t\t\tdate : '");
      out.print( sd.format(b.getClassDate()));
      out.write("'\r\n");
      out.write("\t\t\t\t}");
      out.print( i == blist.size() ? "" : "," );
      out.write("  \r\n");
      out.write("\t\t");

			i++;
		} 
	}
		
      out.write("\r\n");
      out.write("  \t];\r\n");
      out.write("\r\n");
      out.write(" \t console.log(data);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\tvar calendar = new Calendar('#calendar', data);\r\n");
      out.write("\t\r\n");
      out.write("\t}();\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        @font-face {\r\n");
      out.write("            font-family: 'IBMPlexSansKR-Text';\r\n");
      out.write("            src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_20-07@1.0/IBMPlexSansKR-Text.woff') format('woff');\r\n");
      out.write("            font-weight: normal;\r\n");
      out.write("            font-style: normal;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        /* (예빈)고정 높이 footer: 각 페이지마다 그 높이가 다르므로 top 설정 style은 각 페이지에서 직접 제어하는 것으로 한다. */\r\n");
      out.write("        .public-footer{\r\n");
      out.write("        \tposition: absolute;\r\n");
      out.write("            padding-top: 1.6em;\r\n");
      out.write("            padding-bottom: 1.6em;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            vertical-align: center;\r\n");
      out.write("            flex-direction: column;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            letter-spacing: 1px;\r\n");
      out.write("            font-size: .86em;\r\n");
      out.write("            background-color: #212121; \r\n");
      out.write("              box-shadow: 1em 1em 1em #1b1a1a, -.5em -.5em 1em #2b2b2b;\r\n");
      out.write("        \tborder-radius: 3rem;\r\n");
      out.write("        \tcolor: #F6FAFF;\r\n");
      out.write("           \r\n");
      out.write("        }\r\n");
      out.write("        .footer-inner{\r\n");
      out.write("            width: 114em;\r\n");
      out.write("            height: 10em;\r\n");
      out.write("        }\r\n");
      out.write("        .logo-title{\r\n");
      out.write("            text-transform: uppercase;\r\n");
      out.write("            font-weight: bold;\r\n");
      out.write("            font-size: 1.2em;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"public-footer\">\r\n");
      out.write("        <p class=logo-title>Cookingking </p>\r\n");
      out.write("            <div class=\"footer-inner\">\r\n");
      out.write("            <p class=\"first-line\">\r\n");
      out.write("                <strong>상호명</strong> \r\n");
      out.write("                    주식회사 Cookingking\r\n");
      out.write("                <strong>개인정보책임자</strong> \r\n");
      out.write("                    김동현\r\n");
      out.write("                <strong>사업자등록번호</strong> \r\n");
      out.write("                    111-11-11111\r\n");
      out.write("                <strong>통신판매신고번호</strong> \r\n");
      out.write("                    2020-서울강남-0825\r\n");
      out.write("            </p>\r\n");
      out.write("            <p class=\"second-line\">\r\n");
      out.write("                <strong>주소</strong> \r\n");
      out.write("                    서울특별시 강남구 테헤란로 10길 9 그랑프리빌딩 5F\r\n");
      out.write("                <strong>대표번호</strong> \r\n");
      out.write("                    0000-0000\r\n");
      out.write("                <strong>이메일</strong>\r\n");
      out.write("                    we_love_cookingking@ckk.com \r\n");
      out.write("            </p>\r\n");
      out.write("            <p class=\"third-line\">\r\n");
      out.write("                <strong>(주)Cookingking</strong>\r\n");
      out.write("                    은 통신판매중개자이며 통신판매 당사자가 아닙니다. \r\n");
      out.write("                    따라서 클래스/개인간 거래 및 판매에 대하여 책임을 지지 않습니다.\r\n");
      out.write("            </p>        \r\n");
      out.write("            <p class=\"last-line\">\r\n");
      out.write("            <strong>Copyright © Cookingking. All Rights Reserved.</strong>\r\n");
      out.write("            </p>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
