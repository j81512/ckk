/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.57
 * Generated at: 2020-11-10 21:20:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.mypage.review;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import java.util.Map;
import board.model.vo.Board;
import java.util.List;

public final class writeReview_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("board.model.vo.Board");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	Map<String, Object> map = (Map<String, Object>)request.getAttribute("map");
	String userId = (String)request.getAttribute("userId");
	List<Board> userClass = (List<Board>)map.get("list");
	List<Integer> clsNoTemp = new ArrayList<>();


      out.write("    \r\n");
      out.write("<link rel=\"stylesheet\"href=\"");
      out.print(request.getContextPath());
      out.write("/css/msg-review.css\" />\r\n");
      out.write("\r\n");
      out.write("<script src=\"");
      out.print(request.getContextPath() );
      out.write("/js/jquery-3.5.1.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<div id=\"msg-div\">\r\n");
      out.write("\t<p class=\"page-title-p\">리뷰 작성</p>\r\n");
      out.write("\t<div class=\"msg-inner\">\t\t\r\n");
      out.write("\t<div class=\"wrapper-review-table\">\r\n");
      out.write("\t\t<table id=\"msg-tbl\">\r\n");
      out.write("\t\t\t<tr id=\"review-tr-head\">\r\n");
      out.write("\t\t\t\t<th width=\"80\">수강일</th>\r\n");
      out.write("\t\t\t\t<th width=\"300\">강좌명</th>\r\n");
      out.write("\t\t\t\t<th width=\"120\">선생님</th>\r\n");
      out.write("\t\t\t\t<th width=\"80\">리뷰 작성</th>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t");
if(userClass != null && !userClass.isEmpty()) {
      out.write("\r\n");
      out.write("\t\t\t\t<!-- 가져 온 데이터가 뿌려질 자리 -->\r\n");
      out.write("\t\t\t\t");

				int flag = 0;
				for(Board b : userClass) { 
				
 				if((boolean)map.get(String.valueOf(b.getClassNo()))) { 
 	
 					flag++;
	
 					} 
 				}
				if(flag == userClass.size()){
 				
      out.write("\r\n");
      out.write(" \t\t\t\t<tr>\r\n");
      out.write(" \t\t\t\t\t<td colspan=5>\r\n");
      out.write("\t\t\t\t\t\t<span>모든 리뷰를 작성하셨습니다.</span>\r\n");
      out.write("\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write(" \t\t\t\t");

				}
 				else if(flag != userClass.size()){
					for(Board b : userClass) { 
				
      out.write("\r\n");
      out.write("\t \t\t\t\t");
 if(!(boolean)map.get(String.valueOf(b.getClassNo()))) {
      out.write("\r\n");
      out.write("\t \t\t\t\t\t\t\r\n");
      out.write("\t \t\t\t\t\t<!-- <tr>\r\n");
      out.write("\t \t\t\t\t\t<td colspan=5>\r\n");
      out.write("\t\t\t\t\t\t\t<span>더 이상 작성할 리뷰가 없습니다.</span>\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t</tr> -->\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(b.getClassDate() );
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(b.getTitle() );
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(b.getTutorName() );
      out.write('(');
      out.print(b.getTutorId() );
      out.write(")</td>\r\n");
      out.write("\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"button\" value=\"리뷰 작성\" id=\"writReviewBtn\" onclick=\"writeReview(");
      out.print( b.getClassNo() );
      out.write(',');
      out.write(' ');
      out.write('\'');
      out.print( b.getTutorId() );
      out.write("');\"/>\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t");
 } 
      out.write("\r\n");
      out.write(" \t\t\t");
 }else {
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<!-- 데이터가 없을 때  -->\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t<td colspan= \"5\" align=center>수강하신 강의가 없습니다.</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t\t");
 } 
      out.write("\r\n");
      out.write(" \t\t</table>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\t<input type=\"button\" value=\"닫기\" onclick=\"self.close();\"/>\r\n");
      out.write("</div>\r\n");
      out.write("<script>\r\n");
      out.write("function writeReview(clsNo, tutorId){\r\n");
      out.write("\t\r\n");
      out.write("\tvar html =\"<tr>\"\r\n");
      out.write("\t\t + \"<td colspan='4'>\"\r\n");
      out.write("\t\t + \"<form action='");
      out.print(request.getContextPath());
      out.write("/user/writeReview' method='POST'>\"\r\n");
      out.write("\t\t + \"<textarea cols='60' rows='3' name='reviewContent' required></textarea>\"\r\n");
      out.write("\t\t + \"<label for='reviewScore'>별점 선택</label>\"\r\n");
      out.write("\t\t + \"<select name='reviewScore' id='reviewScore' required>\"\r\n");
      out.write("\t\t + \"<option value='' selected disabled>별점을 선택해 주세요</option>\"\r\n");
      out.write("\t\t + \"<option value='1' seleced>★</option>\"\r\n");
      out.write("\t\t + \"<option value='2'>★★</option>\"\r\n");
      out.write("\t\t + \"<option value='3'>★★★</option>\"\r\n");
      out.write("\t\t + \"<option value='4'>★★★★</option>\"\r\n");
      out.write("\t\t + \"<option value='5'>★★★★★</option>\"\r\n");
      out.write("\t\t + \"</select>\"\r\n");
      out.write("\t\t + \"<input type='hidden' name='userId' value='");
      out.print( userId );
      out.write("' />\"\r\n");
      out.write("\t\t + \"<input type='hidden' name='tutorId' value='\"+tutorId+\"' />\"\r\n");
      out.write("\t\t + \"<input type='hidden' name='classNo' value='\"+clsNo+\"'/>\"\r\n");
      out.write("\t\t + \"<input type='submit' value='리뷰 작성' onclick='return gogogo();'/>\"\r\n");
      out.write("\t\t + \"</form>\"\r\n");
      out.write("\t\t + \"</td>\"\r\n");
      out.write("\t\t + \"</tr>\";\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar clickBtn = $(event.target);\r\n");
      out.write("\t\tvar $tr = $(html);\r\n");
      out.write("\t\tvar $trFromBtn = clickBtn.parent().parent();\r\n");
      out.write("\t\tconsole.log(clickBtn); /* 클릭한 버튼의 Tr을 가져옴 */\r\n");
      out.write("\t\tconsole.log($trFromBtn);\r\n");
      out.write("\t\t//$tr.insertAfter($trFromBtn);\r\n");
      out.write("\t\t$tr.insertAfter($trFromBtn);\r\n");
      out.write("\t\r\n");
      out.write("\t\t$('#writReviewBtn').attr(\"onclick\", \"\");\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction gogogo(){\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif(");
      out.print(userId != null);
      out.write(") return true;\r\n");
      out.write("\t\t\telse return false;\r\n");
      out.write("\t\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
